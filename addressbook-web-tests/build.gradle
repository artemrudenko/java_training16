apply plugin: 'java'

repositories{
    mavenCentral()
}

configurations {
    agent
}

dependencies{
    compile 'org.testng:testng:6.10'
    compile 'org.seleniumhq.selenium:selenium-java:2.53.1'
    compile 'io.codearte.jfairy:jfairy:0.5.5'
    compile 'org.hamcrest:java-hamcrest:2.0.0.0'
    compile 'com.beust:jcommander:1.58'
    compile 'com.thoughtworks.xstream:xstream:1.4.9'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'ch.qos.logback:logback-classic:1.1.8'
    compile 'mysql:mysql-connector-java:6.0.5'
    compile 'org.hibernate:hibernate-core:5.2.5.Final'
    agent "org.aspectj:aspectjweaver:1.8.0"
    compile "ru.yandex.qatools.allure:allure-testng-adaptor:1.4.0.RC4"
    compile 'org.robotframework:robotframework:3.0.1'
}

task testGroups(type: Test){
    useTestNG{
        //set TestNG output dir
//        outputDirectory = file("$project.buildDir//testngOutput")
//        useDefaultListeners = true
        suites 'src/test/resources/testng-groups.xml'
    }
    doFirst {
        jvmArgs "-javaagent:${configurations.agent.singleFile}"
    }
    if(project.hasProperty('browser')){
        systemProperty 'browser', "${browser}"
    }
    if(project.hasProperty('platform')){
        systemProperty 'platform', "${platform}"
    }
    if(project.hasProperty('target')){
        systemProperty 'target', "${target}"
    }
    if(project.hasProperty('verifyUI')){
        systemProperty 'verifyUI', "${verifyUI}"
    }
    doLast {
        println('testGroups completed.')
    }
}


task testContacts(type: Test){
    useTestNG{
//        useDefaultListeners = true
        suites 'src/test/resources/testng-contacts.xml'
    }
    doFirst {
        jvmArgs "-javaagent:${configurations.agent.singleFile}"
    }
    if(project.hasProperty('browser')){
        systemProperty 'browser', "${browser}"
    }
    if(project.hasProperty('platform')){
        systemProperty 'platform', "${platform}"
    }
    if(project.hasProperty('target')){
        systemProperty 'target', "${target}"
    }
    if(project.hasProperty('verifyUI')){
        systemProperty 'verifyUI', "${verifyUI}"
    }
    doLast {
        println('testContacts completed.')
    }
}

task testAll(dependsOn:[clean, testGroups, testContacts]){
    doLast {
        println('testAll completed.')
    }
}

//testGroups.mustRunAfter clean
//testContacts.mustRunAfter testGroups

task rf(type: JavaExec){
    main = 'org.robotframework.RobotFramework'
    classpath = sourceSets.test.runtimeClasspath
    args '--outputdir', 'build/rf-report'
    args 'src/test/resources/rf'
}